// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// MVP_kronecker_rcpp
NumericVector MVP_kronecker_rcpp(List& A_list, NumericVector& x);
RcppExport SEXP _mgss_MVP_kronecker_rcpp(SEXP A_listSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type A_list(A_listSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(MVP_kronecker_rcpp(A_list, x));
    return rcpp_result_gen;
END_RCPP
}
// MVP_khatrirao_rcpp
NumericVector MVP_khatrirao_rcpp(List& A_list, NumericVector& x);
RcppExport SEXP _mgss_MVP_khatrirao_rcpp(SEXP A_listSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type A_list(A_listSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(MVP_khatrirao_rcpp(A_list, x));
    return rcpp_result_gen;
END_RCPP
}
// MVP_khatrirao_trans_rcpp
NumericVector MVP_khatrirao_trans_rcpp(List& A_list, NumericVector& y);
RcppExport SEXP _mgss_MVP_khatrirao_trans_rcpp(SEXP A_listSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type A_list(A_listSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(MVP_khatrirao_trans_rcpp(A_list, y));
    return rcpp_result_gen;
END_RCPP
}
// diag_kronecker_rcpp
NumericVector diag_kronecker_rcpp(List& A_list);
RcppExport SEXP _mgss_diag_kronecker_rcpp(SEXP A_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type A_list(A_listSEXP);
    rcpp_result_gen = Rcpp::wrap(diag_kronecker_rcpp(A_list));
    return rcpp_result_gen;
END_RCPP
}
// diag_khatrirao_rcpp
NumericVector diag_khatrirao_rcpp(List& A_list);
RcppExport SEXP _mgss_diag_khatrirao_rcpp(SEXP A_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type A_list(A_listSEXP);
    rcpp_result_gen = Rcpp::wrap(diag_khatrirao_rcpp(A_list));
    return rcpp_result_gen;
END_RCPP
}
// MVP_normalfactor_rcpp
NumericVector MVP_normalfactor_rcpp(const NumericMatrix& A, int left, int right, const NumericVector& x);
RcppExport SEXP _mgss_MVP_normalfactor_rcpp(SEXP ASEXP, SEXP leftSEXP, SEXP rightSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type left(leftSEXP);
    Rcpp::traits::input_parameter< int >::type right(rightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(MVP_normalfactor_rcpp(A, left, right, x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mgss_MVP_kronecker_rcpp", (DL_FUNC) &_mgss_MVP_kronecker_rcpp, 2},
    {"_mgss_MVP_khatrirao_rcpp", (DL_FUNC) &_mgss_MVP_khatrirao_rcpp, 2},
    {"_mgss_MVP_khatrirao_trans_rcpp", (DL_FUNC) &_mgss_MVP_khatrirao_trans_rcpp, 2},
    {"_mgss_diag_kronecker_rcpp", (DL_FUNC) &_mgss_diag_kronecker_rcpp, 1},
    {"_mgss_diag_khatrirao_rcpp", (DL_FUNC) &_mgss_diag_khatrirao_rcpp, 1},
    {"_mgss_MVP_normalfactor_rcpp", (DL_FUNC) &_mgss_MVP_normalfactor_rcpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_mgss(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
